#include<stdio.h>
 
int main()
{
    int bt[20],T[20],wt[20],tat[20],pr[20],i,j,n,total=0,pos,temp,avg_wt,avg_tat,s,t;
      int prs[20],is,js,totals=0,poss,temps,avg_wts,avg_tats;
    int bts[20],pts[20],wts[20],tas[20],tats[20],prt[20],S[20];
    printf("Enter Total Number of People:");
    scanf("%d",&n);
   
	
    printf("Enter Total Number of Teachers:");
a:
    scanf("%d",&t);
    if(t>n)
    {
	
       printf("Please Enter valid no:");
       getch();
			goto a;
   }
  
    printf("Enter Total Number of Students:");
     b:
    scanf("%d",&s);
     if(s>n || s!=n-t)
    {
	
       printf("Please Enter valid no.(Students should be less than or equal to people):");
       getch();
			goto b;
   }
 
    printf("\nEnter Burst Time and Priority for Teachers\n");
    for(i=0;i<t;i++)
    {
        printf("\nT[%d]\n",i+1);
        printf("Burst Time:");
        scanf("%d",&bt[i]);
        printf("Priority:");
        scanf("%d",&pr[i]);
        T[i]=i+1;           //contains process number
    }
    
   printf("\nEnter Burst Time and Priority for Students\n");
    for(is=0;is<s;is++)
    {
        printf("\nS[%d]\n",is+1);
        printf("Burst Time:");
        scanf("%d",&bts[is]);
        printf("Priority:");
        scanf("%d",&prs[is]);//contains priority for teacher
        S[is]=is+1;           //contains process number
    }
 
    //sorting burst time, priority and process number in ascending order using selection sort
    for(i=0;i<t;i++)
    {
        pos=i;
        for(j=i+1;j<t;j++)
        {
            if(pr[j]<pr[pos])
                pos=j;
        }
 
        temp=pr[i];
        pr[i]=pr[pos];
        pr[pos]=temp;
 
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
 
        temp=T[i];
        T[i]=T[pos];
        T[pos]=temp;
    }
 
    wt[0]=0;	//waiting time for first process is zero
 
    //calculate waiting time
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
 
        total+=wt[i];
    }
 
    avg_wt=total/n;      //average waiting time
    total=0;
 
    printf("\Teacher\t    Burst Time    \tWaiting Time\tTurnaround Time");
    for(i=0;i<t;i++)
    {
        tat[i]=bt[i]+wt[i];     //calculate turnaround time
        total+=tat[i];
        printf("\nT[%d]\t\t  %d\t\t    %d\t\t\t%d",T[i],bt[i],wt[i],tat[i]);
    }
 
    avg_tat=total/n;     //average turnaround time
    printf("\n\nAverage Waiting Time=%d",avg_wt);
    printf("\nAverage Turnaround Time=%d\n",avg_tat);
 
 
 
 
 
 
 
    //sorting burst time, priority and process number in ascending order using selection sort
    for(is=0;is<s;is++)
    {
        pos=i;
        for(js=is+1;js<n;js++)
        {
            if(prs[j]<prs[poss])
                poss=js;
        }
 
        temps=prs[is];
        prs[is]=prs[poss];
        prs[poss]=temps;
 
        temps=bts[is];
        bts[is]=bts[poss];
        bts[poss]=temps;
 
        temps=S[is];
        S[is]=S[poss];
        S[poss]=temps;
    }
 
    wts[0]=0;	//waiting time for first process is zero
 
    //calculate waiting time
    for(is=1;is<n;is++)
    {
        wts[is]=0;
        for(js=0;js<is;js++)
            wts[is]+=bts[js];
 
        totals+=wts[is];
    }
 
    avg_wts=totals/n;      //average waiting time
    totals=0;
 
    printf("\nStudent\t    Burst Time    \tWaiting Time\tTurnaround Time");
    for(is=0;is<s;is++)
    {
        tas[is]=bts[is]+wts[is];     //calculate turnaround time
        totals+=tas[is];
        printf("\nS[%d]\t\t  %d\t\t    %d\t\t\t%d",S[is],bts[is],wts[is],tas[is]);
    }
 
    avg_tats=totals/n;     //average turnaround time
    printf("\n\nAverage Waiting Time=%d",avg_wts);
    printf("\nAverage Turnaround Time=%d\n",avg_tats);
 
	return 0;
}
